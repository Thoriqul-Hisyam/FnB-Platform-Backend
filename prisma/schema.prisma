// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name String
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Restaurant {
  id        String     @id @default(uuid())
  name      String
  address   String
  orders       Order[]      
  menus     MenuItem[]
  categories MenuCategory[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model MenuCategory {
  id           String     @id @default(uuid())
  name         String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  items        MenuItem[]
}

model MenuItem {
  id           String     @id @default(uuid())
  name         String
  price        Int
  description   String?
  orders      OrderItem[] 
  isAvailable  Boolean    @default(true)
  imageUrl     String?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  category     MenuCategory? @relation(fields: [categoryId], references: [id])
  categoryId   String?
}
model Order {
  id           String       @id @default(uuid())
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id])
  restaurantId String
  orderItems   OrderItem[]
  totalPrice   Int
  status       OrderStatus  @default(PENDING)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  customer      Customer?    @relation(fields: [customerId], references: [id])
  customerId    String?
}


model OrderItem {
  id         String     @id @default(uuid())
  order      Order      @relation(fields: [orderId], references: [id])
  orderId    String
  menuItem   MenuItem   @relation(fields: [menuItemId], references: [id])
  menuItemId String
  quantity   Int
  price      Int         // harga satuan saat order
}

model Customer {
  id        String   @id @default(uuid())
  name      String?
  phone     String   @unique
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  RECEIVED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}
